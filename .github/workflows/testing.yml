name: CI

on:
  push:
    branches:
    - main
    - stable
    - v*.*.*
    tags:
    - v*
  pull_request:
  workflow_dispatch:

jobs:

  initial-tests:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        include:

        - name: Python 3.11 (Linux), pinned dependencies
          os: ubuntu-latest
          python: '3.11'
          toxenv: py311-pins
          toxargs: --develop

        - name: Python 3.10 (MacOS), code coverage
          os: windows-latest
          python: '3.10'
          toxenv: py310-cov-all

        - name: Python 3.9 (Windows), minimal dependencies
          os: windows-latest
          python: 3.9
          toxenv: py39-all-minimal

        - name: Linters
          os: ubuntu-latest
          python: '3.11'
          toxenv: linters

    steps:

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}
        cache: pip

    - name: Install Python dependencies
      run: python -m pip install --progress-bar off --upgrade tox

    - name: Run tests
      run: tox ${{ matrix.toxargs }} -e ${{ matrix.toxenv }} -- ${{ matrix.toxposargs }}

    - name: Upload coverage to codecov
      if: ${{ contains(matrix.toxenv,'-cov') }}
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  documentation:
    name: Documentation, pinned dependencies
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install graphviz and pandoc
      run: sudo apt-get install graphviz pandoc

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: pip

    - name: Install tox
      run: python -m pip install --progress-bar off --upgrade tox

    - name: Build docs
      run: tox -e build_docs_pins -- -q

  import-plasmapy:
    name: Importing PlasmaPy
    runs-on: windows-latest

    strategy:
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        cache: pip

    - name: Install Python dependencies
      run: python -m pip install --progress-bar off --upgrade tox

    - name: Import PlasmaPy
      run: tox -e py39-minimal-pypi-import

  build-n-publish:
    name: Packaging
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - name: Get history and tags for SCM versioning to work
      run: |
        git fetch --prune --unshallow
        git fetch --depth=1 origin +refs/tags/*:refs/tags/*

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: pip

    - name: Install requirements
      run: |
        pip install --progress-bar off setuptools numpy wheel setuptools_scm twine build pip

    - name: Build a source tarball
      run: python -m build --sdist --outdir dist/

    - name: Build a binary wheel
      run: python -m build --wheel --outdir dist/

    - name: Twine check
      run: twine check dist/*

    - name: Install PlasmaPy in all variants
      run: |
        pip install --progress-bar off .[dev]
        pip install --progress-bar off -e .[dev]
